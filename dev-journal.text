Service -> Hits API server for DB Info

Just realized you can access user information through localstorage.
I'm dumb.

Unit Tests:
    - Write unit tests for the Express API.
    - Granular really likes people who do unit tests.

Model Changes:
    - Usergroup needs a description section -> DONE
    - Usergroup needs array of channels -> DONE
        - Channels should be their own objects. -> DONE
        - Will handle storing message data. -> DONE

Admin-tab with MODALS:
    - Put dropdown tab into its own component.
    - Admin options:
        - Admins can create channels, delete channels, and manage group applications (if private)
        - On creation/modification of channels, need to refresh parent component
            - https://stackoverflow.com/questions/40282646/angular-2-one-component-trigger-refresh-of-another-component-on-the-page


Group-home landing page:
    - Need to prevent page from rendering until all data is gotten.
        - see: https://shermandigital.com/blog/wait-for-data-before-rendering-views-in-angular-2/
    
    - Services
        - Get user group by user group code -> DONE

    - API

    - UI

Dashboard: (API: done) (UI: done) (services: WIP)
    - Services
        - getUserGroups -> DONE
        - createUserGroup -> DONE
        - joinUserGroup -> DONE
        
    - API -> DONE
        - getUserUserGroups -> DONE
        
    - UI -> DONE
        - Use ELEMENT:nth-child(odd) in CSS to get alternating colors for userGroups in dashboard view
        - Create new user group 
            - Register new user_group and supply user_group details
            - Provide link or registration code for people looking to join user_group
                - Privacy settings:
                    - Private mode: Admins must approve group signups if private mode enabled
        - Join user group
            - (if notRegistered): Register new user with work email
            - Provide link or registration code for people looking to join user_group
        
    
Usergroup API: (outlined)
    - generateUserGroupCode() -> DONE
        - Needs to compare against db to make sure this code doesn't already exist -> not neccessary.
    - addUserGroup(newUserGroup, callback) -> DONE
        - See function name

    - addUserToGroup(user) -> DONE
        - Adds user to existing UserGroup
    - getUserGroupByUserGroupCode(userGroupCode, callback) -> DONE
        - See function name

    - checkUserInUserGroup(user, userGroup) -> DONE
        - Checks if user is already in UserGroup's users.

    - checkUserGroupInUser(user, userGroup) -> DONE
        - Checks if usergroup is already in user's groups.

Landing Page: (mostly done)
    - Combined login/registration component
        - Same as current login component, but with a registration button next to the login button
        - Redirects you to register form with your proposed username/password filled out for you


COMMON MISTAKES:
    Always map response objects from $http.post etc as .json(). Otherwise they're unreadable.


KNOWN BUGS:
    For some reason slin63 user has a bunch of usergroups attached to him that don't exist.