Service -> Hits API server for DB Info

Just realized you can access user information through localstorage.
I'm dumb.

Weird thing with usergroups:
    Take a look at how channels are added to usergroups and how the usergroup admin page reads channel info

Sockets / Chat
    - Added socket configs to app.js
        - Primitive, need to tie these to the ChannelSchema and send actual meaningful data
    - Outline
        1. chat.component.ts: Sends message body with channel, group, timestamp, content info 
        2. chat.service: Adds message to channel.messages, emits new message alert to Sockets
        3. app.js: io.sockets.emit() notifies all users that a new message for that channel has been added
            - pushes that message to viewers and updates channels.messages array with new message IF the user is currently viewing that channel.
    - Needed APIs / Tests: --> DONE
        - Add message to channel X
        - Get all channel messages X
    - I have no fucking idea how to make it scroll to the bottom consistently.
        -> You had to set it on a delay of ~100ms so that the element would have ample time to refresh and provide updated height dimensions data


Unit Tests / TDD:
    - Channel Unit Tests:
        - [x] get all usergroup channels {DEPRECATED}
        - [x] add new channel
        - [x] delete channel
        - [x] edit channel
        - [x] get channels by usergroup 

Group-Admin Page:
    - Put dropdown tab into its own component.
    - Admin options:
        - Channels
            - Create / Delete Channels 
            - UI 
            - API -> Still need add / remove channel functions
                - API working to retrieve channels from group
                - API to create a group NEEDS TESTING
            - Service 
                - CreateChannel x
                - DeleteChannel x
                - EditChannel x 

Group-home landing page:
    - Need to prevent page from rendering until all data is gotten.
        - see: https://shermandigital.com/blog/wait-for-data-before-rendering-views-in-angular-2/
    
    - Services
        - Get user group by user group code -> DONE

    - API

    - UI

Dashboard: (API: done) (UI: done) (services: WIP)
    - Services
        - getUserGroups -> DONE
        - createUserGroup -> DONE
        - joinUserGroup -> DONE
        
    - API -> DONE
        - getUserUserGroups -> DONE
        
    - UI -> DONE
        - Use ELEMENT:nth-child(odd) in CSS to get alternating colors for userGroups in dashboard view
        - Create new user group 
            - Register new user_group and supply user_group details
            - Provide link or registration code for people looking to join user_group
                - Privacy settings:
                    - Private mode: Admins must approve group signups if private mode enabled
        - Join user group
            - (if notRegistered): Register new user with work email
            - Provide link or registration code for people looking to join user_group
        
    
Usergroup API: (outlined)
    - generateUserGroupCode() -> DONE
        - Needs to compare against db to make sure this code doesn't already exist -> not neccessary.
    - addUserGroup(newUserGroup, callback) -> DONE
        - See function name

    - addUserToGroup(user) -> DONE
        - Adds user to existing UserGroup
    - getUserGroupByUserGroupCode(userGroupCode, callback) -> DONE
        - See function name

    - checkUserInUserGroup(user, userGroup) -> DONE
        - Checks if user is already in UserGroup's users.

    - checkUserGroupInUser(user, userGroup) -> DONE
        - Checks if usergroup is already in user's groups.

Landing Page: (mostly done)
    - Combined login/registration component
        - Same as current login component, but with a registration button next to the login button
        - Redirects you to register form with your proposed username/password filled out for you


COMMON MISTAKES:
    Always map response objects from $http.post etc as .json(). Otherwise they're unreadable.


KNOWN BUGS:
    For some reason slin63 user has a bunch of usergroups attached to him that don't exist.